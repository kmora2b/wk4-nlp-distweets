{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Disaster Tweets Classification - Mini Project\n\n## Problem and Data Overview\n\nNatural Language Processing (NLP) involves developing algorithms that allow computers to understand, interpret, and generate human language.\nThis competition challenges us to classify tweets as being related to a real disaster (1) or not (0).\nThe train.csv contains labeled examples (text + target) while test.csv contains only texts.\nTweets are short and informal, containing many misspellings, slang, and abbreviations, making this a realistic NLP task.\nUnderstanding disaster-related tweets can aid in faster emergency responses and resource allocation.","metadata":{}},{"cell_type":"markdown","source":"## Load Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport re\nimport string\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout, Bidirectional\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-28T05:59:35.518207Z","iopub.execute_input":"2025-04-28T05:59:35.518568Z","iopub.status.idle":"2025-04-28T06:00:01.993509Z","shell.execute_reply.started":"2025-04-28T05:59:35.518530Z","shell.execute_reply":"2025-04-28T06:00:01.992007Z"}},"outputs":[{"name":"stderr","text":"2025-04-28 05:59:43.330403: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1745819983.676802      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1745819983.763588      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"## Load Data","metadata":{}},{"cell_type":"code","source":"train_df = pd.read_csv('/kaggle/input/nlp-getting-started/train.csv')\ntest_df = pd.read_csv('/kaggle/input/nlp-getting-started/test.csv')\n\nprint(\"Training data shape:\", train_df.shape)\nprint(\"Sample training data:\")\nprint(train_df.head())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"## Exploratory Data Analysis (EDA)\n### In EDA, we plan to:\n- Analyze the distribution of the target variable to check for class imbalance.\n- Check for missing values across features.\n- Explore the text length to determine appropriate sequence padding.\n- Visualize common words in disaster vs non-disaster tweets to understand text patterns.\n\nBased on the observations from EDA, we will determine data cleaning and modeling strategies.","metadata":{}},{"cell_type":"code","source":"# Observing target distribution to check for class imbalance\nsns.countplot(data=train_df, x='target')\nplt.title('Distribution of Target Variable (0 = Not Disaster, 1 = Disaster)')\nplt.xlabel('Target')\nplt.ylabel('Count')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Observation:\n- There is a slight imbalance (~57% non-disaster, ~43% disaster), but it is manageable.\n- Slight imbalance may still slightly bias the model towards non-disasters.","metadata":{}},{"cell_type":"code","source":"# Checking for missing values\nprint(\"Missing values in training data:\")\nprint(train_df.isnull().sum())","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Observation:\n- Location (approx 33% missing) and keyword (approx 20% missing) columns have substantial missingness.\n- Since text has no missing values and is critical for this project, we can proceed safely.","metadata":{}},{"cell_type":"code","source":"# Analyzing text lengths\ntrain_df['text_len'] = train_df['text'].apply(lambda x: len(x.split()))\nsns.histplot(train_df['text_len'], bins=30)\nplt.title('Distribution of Tweet Lengths')\nplt.xlabel('Number of Words')\nplt.show()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Observation:\nMost tweets are under 30 words, reaffirming the decision to limit max sequence length.","metadata":{}},{"cell_type":"code","source":"# Generate Word Clouds to visualize common words\nfrom wordcloud import WordCloud\n\ndef plot_wordcloud(text, title):\n    wc = WordCloud(width=800, height=400, background_color='white').generate(' '.join(text))\n    plt.figure(figsize=(10,5))\n    plt.imshow(wc, interpolation='bilinear')\n    plt.axis('off')\n    plt.title(title)\n    plt.show()\n\nplot_wordcloud(train_df[train_df['target']==1]['text'], 'Disaster Tweets')\nplot_wordcloud(train_df[train_df['target']==0]['text'], 'Non-Disaster Tweets')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"### Observation:\n- Disaster tweets highlight words like \"fire\", \"earthquake\", \"rescue\", \"evacuate\".\n- Non-disaster tweets often use disaster-related terms humorously or figuratively.","metadata":{}},{"cell_type":"markdown","source":"","metadata":{}}]}